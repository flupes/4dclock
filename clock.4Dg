#platform "Gen4-uLCD-32DT"

#inherit "4DGL_16bitColours.fnc"

#inherit "VisualConst.inc"

#inherit "clockConst.inc"

#inherit "clockPinout.inc"
#inherit "display.inc"
#inherit "DS3234.inc"

#constant MODE_CLOCK 0
#constant MODE_SET_SECONDS 1
#constant MODE_SET_MINUTES 2
#constant MODE_SET_HOURS 3
#constant MODES_COUNT 4

var g_mode := MODE_CLOCK;
var g_set_timeout := 0;
var g_g_dboundary[4];

func CheckButton(var buttonPin)
    var private pressed_count[2] := [0, 0];
    var private pressed_state[2] := [0, 0];
    var index := 0;
    var pressed := 0;
    if ( buttonPin != PIN_QENC_PUSH )
        index := 1;
    endif
    if ( pin_Read(buttonPin) == 0 )
        pressed_count[index]++;
    else
        if ( pressed_count[index] > 1 )
            pressed_count[index]--;
        else
            pressed_state[index] := 0;
        endif
    endif
    if (pressed_state[index] == 0 && pressed_count[index] > 6)
        pressed_state[index] := 1;
        pressed := 1;
    endif
    return (pressed);
endfunc

func ResetMode()
    g_set_timeout := 1;
endfunc

func main()

    var private last_second, last_minute, last_date := -1;

    gfx_Set(SCREEN_MODE,LANDSCAPE) ;

    if ( ConfigurePins() > 0 )
        print("Error while configuring the board!");
        repeat forever
    endif

    if ( DS3234_Init() > 0 )
        print("Failed to initialize DS3234!");
        repeat forever
    endif

    if (!(file_Mount()))
        while(!(file_Mount()))
            putstr("Drive not mounted...");
            pause(2000);
            gfx_Cls();
            pause(200);
        wend
    endif

    LoadResources();

    touch_Set(TOUCH_ENABLE);
    var brightness := 8;
    var x, y, pressed, seconds, minutes, hours, old_mode;
    var qenc_delta := 0;
    var counter, max_counts;

    gfx_Contrast(brightness);

    Qencoder1Reset();
    UpdateDots();

    repeat
        DS3234_Read();

        pressed := CheckButton(PIN_QENC_PUSH);
        if ( pressed )
            old_mode := g_mode;
            g_mode := (old_mode + 1) % MODES_COUNT;
            if ( g_mode > 0 )
                switch (g_mode)
                    case MODE_SET_SECONDS:
                        g_g_dboundary[0] := 124; g_g_dboundary[1] := 144;
                        g_g_dboundary[2] := g_g_dboundary[0] + 72; g_g_dboundary[3] := g_g_dboundary[1] + 44;
                        seconds := g_ds_seconds;
                        counter := seconds * 4;
                        max_counts := 60 * 4;
                        break;
                    case MODE_SET_MINUTES:
                        gfx_RectangleFilled(g_g_dboundary[0]-4, g_g_dboundary[1]-4, g_g_dboundary[2]+4, g_g_dboundary[3]+4, BLACK);
                        g_force_update:= 1; UpdateSeconds(seconds);  g_force_update := 0;
                        g_g_dboundary[0] := 174; g_g_dboundary[1] := 46;
                        g_g_dboundary[2] := g_g_dboundary[0]+ 140; g_g_dboundary[3] := g_g_dboundary[1] + 88;
                        minutes := g_ds_minutes;
                        counter := minutes * 4;
                        max_counts := 60 * 4;
                        break;
                    case MODE_SET_HOURS:
                        gfx_RectangleFilled(g_g_dboundary[0]-4, g_g_dboundary[1]-4, g_g_dboundary[2]+4, g_g_dboundary[3]+4, BLACK);
                        g_force_update:= 1; UpdateMinutes(minutes); g_force_update := 0;
                        g_g_dboundary[0] := 5; g_g_dboundary[1] := 46;
                        g_g_dboundary[2] := g_g_dboundary[0]+140; g_g_dboundary[3] := g_g_dboundary[1]+88;
                        hours := g_ds_hours;
                        counter := hours * 4;
                        max_counts := 24 * 4;
                        break;
                endswitch
                sys_SetTimer(TIMER1, 12000);
                sys_SetTimerEvent(TIMER1, ResetMode);
                Qencoder1Reset();
            else
                if ( sys_GetTimer(TIMER1) > 0 )
                    sys_SetTimerEvent(TIMER1, 0);
                endif
                gfx_RectangleFilled(g_g_dboundary[0]-4, g_g_dboundary[1]-4, g_g_dboundary[2]+4, g_g_dboundary[3]+4, BLACK);
                g_force_update:= 1; UpdateHours(hours); g_force_update := 0;
            endif
        endif

        seconds := g_ds_seconds;
        minutes := g_ds_minutes;
        hours := g_ds_hours;
        if ( g_set_timeout == 1 )
            g_set_timeout := 0;
            gfx_RectangleFilled(g_g_dboundary[0]-4, g_g_dboundary[1]-4, g_g_dboundary[2]+4, g_g_dboundary[3]+4, BLACK);
            g_force_update := 1;
            UpdateTime(hours, minutes, seconds);
            g_force_update := 0;
            g_mode := MODE_CLOCK;
        endif

        if ( g_mode > 0)
            qenc_delta :=  peekW(QEN1_DELTA);
            // quadrature encoder adds 4 ticks for one step: total value/4 is what we want at the end
            if ( qenc_delta != 0 )
                sys_SetTimer(TIMER1, 12000);
                counter += qenc_delta;
                if (counter > max_counts - 1)
                    counter -= max_counts;
                endif
                if (counter < 0)
                    counter += max_counts;
                endif
            endif
            switch (g_mode)
                case MODE_SET_SECONDS:
                    seconds := counter / 4;
                    UpdateSeconds(seconds);
                    break;
                case MODE_SET_MINUTES:
                    minutes := counter / 4;
                    UpdateMinutes(minutes);
                    break;
                case MODE_SET_HOURS:
                    hours := counter / 4;
                    UpdateHours(hours);
                    break;
                endswitch
            gfx_Surround(g_g_dboundary[0]+4, g_g_dboundary[1]+4, g_g_dboundary[2]-4, g_g_dboundary[3]-4, 6, 2, CYAN);
        endif

        if (0 && minutes != last_minute)
            last_minute := minutes;
            //gfx_Cls();
            // Full refresh every minute
            gfx_RectangleFilled(2, 44, 318, 100, BLACK);
            UpdateDots();
            g_force_update := 1;
            UpdateCalendar(g_ds_year, g_ds_month, g_ds_date, g_ds_day);
            UpdateTime(g_ds_hours, g_ds_minutes, seconds);
            g_force_update := 0;
        else
            if (seconds != last_second)
                last_second := seconds;
                UpdateTime(hours, minutes, seconds);
            endif
            if (last_date != g_ds_date)
                last_date := g_ds_date;
                UpdateCalendar(g_ds_year, g_ds_month, g_ds_date, g_ds_day);
            endif
        endif

        if (touch_Get(TOUCH_STATUS) == TOUCH_RELEASED)
            x := touch_Get(TOUCH_GETX);
            y := touch_Get(TOUCH_GETY);
            if ( y > 120 & y < 220 )
                if ( x < 100 )
                    brightness -= 2;
                    if ( brightness < 2 )
                        brightness := 2;
                    endif
                endif
                if ( x > 220 )
                    brightness += 2;
                    if ( brightness > 14 )
                        brightness := 14;
                    endif
                endif
                gfx_Contrast(brightness);
            endif
        endif
    forever

endfunc

/*
        if (g_update_h)
            ledDigitsDisplay(g_hours, iihours, 5, 2, 1, 72, 1) ;
            g_update_h := 0;
        endif
        if (g_update_m)
            ledDigitsDisplay(g_minutes, iiminutes, 173, 2, 1, 72, 0) ;
            g_update_m := 0;
        endif
        if (0 && g_update_s)
            ledDigitsDisplay(g_seconds, iiseconds, 124, 2, 1, 36, 0) ;
            g_update_s := 0;
        endif
        pressed := CheckButton(PIN_QENC_PUSH);
        if ( pressed )
            counter := 0;
            ledDigitsDisplay(counter/4, iiseconds, 124, 2, 1, 36, 0);
        endif
*/

